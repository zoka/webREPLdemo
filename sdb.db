{:post-monikers {"welcome-to-ringmon-middleware-demo" "0"}, :post-ids ("0"), :posts {"0" {:ts 1331343543923, :md-body "<p>The ringMon is a\n<a href=\"https://github.com/mmcgrana/ring\">Ring</a> \n middleware that adds remote diagnostic and REPL interaction capability to Clojure web applications that are based on Ring library or higher level web frameworks such as Noir or Compojure.</p>\n\n<p>It injects single monitoring page at  /ringmon/monview.html</p>\n\n<p>The page periodically displays raw JMX data of interest in a tree like structure. It also shows\nderived values such as CPU load that is calculated by sampling JMX property OperatingSystem.ProcessCpuTime every 2 seconds , AJAX requests statistics and sticky session count.</p>\n\n<p>Moreover, the page provides full featured \n<a href=\"https://github.com/clojure/tools.nrepl\">nREPL</a> \nfront end,  with syntax coloured editor, command history and persistent sessions. The actual nREPL server runs in the context  of this application. The ringMon web page uses AJAX to submit Clojure forms from input window (upon pressing Ctrl-Enter), displaying nREPL responses in a separate output window. The script output from nREPL server is sampled at variable rate depending of output activity. Since nREPL session is persistent the nREPL output is buffered even when web client disconnects, and will be sent out on next reconnection. Currently only one session is kept for particular browser per each client computer. Nothing horrible happens if you open multiple windows within the same browser, only that nREPL output will randomly be sprinkled across multiple output windows. This restriction will be removed soon, but for the time being using Chrome + Firefox + Safari will give you 3 simultaneous sessions :). </p>\n\n<p>You can submit multiple forms (scripts) without waiting for the previous ones to finish - they will be queued by nREPL server. The 'Interrupt' button will try (and in most cases succeed) to break the current script execution and possibly schedule the next one in the queue, if any. Note that if script creates other threads they may not be interrupted, and that their eventual output will not be captured by nREPL server - it will go to the stdin of the shell that started your Clojure application. If you are on Heroku, you can catch it with 'heroku logs -t' command. </p>\n\n<p>This demo blog (noirMon) is based on  Chris Granger's \n<a href=\"https://github.com/ibdknox/Noir-blog\">Noir-blog</a> \nexample application for his \n<a href=\"https://github.com/ibdknox/noir\">Noir</a> \n web framework. </p>\n\n<p>Only small amount of changes was required to add ringMon capability to this application:</p>\n\n<ul>\n<li>include   [noirmon \"0.1.0-SNAPSHOT\"] in project.clj<p></li>\n</ul>\n\n<p>*  add the middleware itself before starting the server:<br>\n               (server/add-middleware monitor/wrap-ring-monitor) \n<p>* put convenient link to access the monitoring page (optional)</p> In case of real application more secure access mechanism should be considered. \n\n\nYou can best view the startup source if you enter the following into  nREPL input window and press Ctrl-Enter:\n<p></p>\n\n<p>(use 'noirmon.server)<br>\n(source -main)</p>\n", :date "03/10/12", :tme "12:39PM", :moniker "welcome-to-ringmon-middleware-demo", :title "Welcome to ringMon middleware demo", :perma-link "/blog/view/welcome-to-ringmon-middleware-demo", :username "zoka", :body "The ringMon is a\r\n[Ring](https://github.com/mmcgrana/ring) \r\n middleware that adds remote diagnostic and REPL interaction capability to Clojure web applications that are based on Ring library or higher level web frameworks such as Noir or Compojure.\r\n\r\nIt injects single monitoring page at  /ringmon/monview.html\r\n\r\nThe page periodically displays raw JMX data of interest in a tree like structure. It also shows\r\nderived values such as CPU load that is calculated by sampling JMX property OperatingSystem.ProcessCpuTime every 2 seconds , AJAX requests statistics and sticky session count.\r\n\r\nMoreover, the page provides full featured \r\n[nREPL](https://github.com/clojure/tools.nrepl) \r\nfront end,  with syntax coloured editor, command history and persistent sessions. The actual nREPL server runs in the context  of this application. The ringMon web page uses AJAX to submit Clojure forms from input window (upon pressing Ctrl-Enter), displaying nREPL responses in a separate output window. The script output from nREPL server is sampled at variable rate depending of output activity. Since nREPL session is persistent the nREPL output is buffered even when web client disconnects, and will be sent out on next reconnection. Currently only one session is kept for particular browser per each client computer. Nothing horrible happens if you open multiple windows within the same browser, only that nREPL output will randomly be sprinkled across multiple output windows. This restriction will be removed soon, but for the time being using Chrome + Firefox + Safari will give you 3 simultaneous sessions :). \r\n\r\nYou can submit multiple forms (scripts) without waiting for the previous ones to finish - they will be queued by nREPL server. The 'Interrupt' button will try (and in most cases succeed) to break the current script execution and possibly schedule the next one in the queue, if any. Note that if script creates other threads they may not be interrupted, and that their eventual output will not be captured by nREPL server - it will go to the stdin of the shell that started your Clojure application. If you are on Heroku, you can catch it with 'heroku logs -t' command. \r\n\r\nThis demo blog (noirMon) is based on  Chris Granger's \r\n[Noir-blog](https://github.com/ibdknox/Noir-blog) \r\nexample application for his \r\n[Noir](https://github.com/ibdknox/noir) \r\n web framework. \r\n\r\nOnly small amount of changes was required to add ringMon capability to this application:\r\n\r\n*  include   [noirmon \"0.1.0-SNAPSHOT\"] in project.clj<p>\r\n<p>*  add the middleware itself before starting the server:<br>\r\n               (server/add-middleware monitor/wrap-ring-monitor) \r\n<p>* put convenient link to access the monitoring page (optional)</p> In case of real application more secure access mechanism should be considered. \r\n\r\n\r\nYou can best view the startup source if you enter the following into  nREPL input window and press Ctrl-Enter:\r\n<p></p>\r\n(use 'noirmon.server)<br>\r\n(source -main)", :id "0"}}, :next-post-id 2, :users {"zoka" {:username "zoka", :password "$2a$10$jIUNBhDkTI6lX7uU9PhmLupLSJERDV3BAJIojGKLEOlu8VDDsXSvy"}, "admin" {:username "admin", :password "$2a$10$TZyDKHhuHvHDxi4ISTIhZ.fO4PShd1isQPjnydUDRZ/vX0MrcFmO6"}}}