{:post-monikers {"welcome-to-ringmon-middleware-demo" "0"}, :post-ids ("0"), :posts {"0" {:ts 1331343543923, :md-body "<p>The ringMon is a\n<a href=\"https://github.com/mmcgrana/ring\">Ring</a> \n middleware that adds remote diagnostic and REPL interaction capability to\n Clojure web applications that are based on Ring library or higher level web \nframeworks such as Noir or Compojure.</p>\n\n<p>It injects single monitoring page at  /ringmon/monview.html</p>\n\n<p>The page periodically displays raw JMX data of interest in a tree like structure.\nIt also shows derived values such as CPU load that is calculated by sampling JMX \nroperty OperatingSystem.ProcessCpuTime every 2 seconds and \nAJAX requests statistics.</p>\n\n<p>Moreover, the page provides full featured \n<a href=\"https://github.com/clojure/tools.nrepl\">nREPL</a> \nfront end,  with syntax coloured editor, command history and persistent sessions.\nThe actual nREPL server runs in the context  of this application.\nThe ringMon web page uses AJAX to submit Clojure forms from\ninput window (upon pressing Ctrl-Enter), displaying nREPL responses\nin a separate output window. The script output from nREPL server is sampled at\nvariable rate depending of output activity.\nSince nREPL session is persistent the nREPL output is buffered even when \nweb client (browser) is disconnected, and will be sent out on next reconnection.\nCurrently only one session is kept for particular browser per each \nclient computer.\nNothing horrible happens if you open multiple windows within the same browser,\nonly that nREPL output will randomly be sprinkled across multiple output windows. \nThis restriction will be removed soon, \nbut for the time being using Chrome + Firefox + Safari will give you 3 \nsimultaneous sessions :). </p>\n\n<p>You can submit multiple forms (scripts) without waiting\nfor the previous ones to finish - they will be queued by \nnREPL server. The 'Interrupt' button will try (and in most cases succeed)\nto break the current script execution and possibly schedule the next one in\nthe queue, if any. Note that if script creates other threads they may\nnot be interrupted, and that their eventual output will not be captured by \nnREPL server - it will go to the stdout of the shell that started your \nClojure application. If you are on Heroku, you can catch \nit with 'heroku logs -t' command. </p>\n\n<p>This demo blog (noirMon) is based on  Chris Granger's \n<a href=\"https://github.com/ibdknox/Noir-blog\">Noir-blog</a> \nexample application for his \n<a href=\"https://github.com/ibdknox/noir\">Noir</a> \n web framework. </p>\n\n<p>Only small amount of changes was required to add ringMon capability to\nthis application:</p>\n\n<script src=\"https://gist.github.com/2030301.js\"> </script>\n\n<ul>\n<li>include   [noirmon \"0.1.0-SNAPSHOT\"] in project.clj<p></li>\n</ul>\n\n<p>*  add the middleware itself before starting the server:<br>\n               (server/add-middleware monitor/wrap-ring-monitor) \n<p>* put convenient link to access the monitoring page (optional)</p> \n", :date "03/10/12", :tme "12:39PM", :moniker "welcome-to-ringmon-middleware-demo", :title "Welcome to ringMon middleware demo", :perma-link "/blog/view/welcome-to-ringmon-middleware-demo", :username "zoka", :body "The ringMon is a\r\n[Ring](https://github.com/mmcgrana/ring) \r\n middleware that adds remote diagnostic and REPL interaction capability to\r\n Clojure web applications that are based on Ring library or higher level web \r\nframeworks such as Noir or Compojure.\r\n\r\nIt injects single monitoring page at  /ringmon/monview.html\r\n\r\nThe page periodically displays raw JMX data of interest in a tree like structure.\r\nIt also shows derived values such as CPU load that is calculated by sampling JMX \r\nroperty OperatingSystem.ProcessCpuTime every 2 seconds and \r\nAJAX requests statistics.\r\n\r\nMoreover, the page provides full featured \r\n[nREPL](https://github.com/clojure/tools.nrepl) \r\nfront end,  with syntax coloured editor, command history and persistent sessions.\r\nThe actual nREPL server runs in the context  of this application.\r\nThe ringMon web page uses AJAX to submit Clojure forms from\r\ninput window (upon pressing Ctrl-Enter), displaying nREPL responses\r\nin a separate output window. The script output from nREPL server is sampled at\r\nvariable rate depending of output activity.\r\nSince nREPL session is persistent the nREPL output is buffered even when \r\nweb client (browser) is disconnected, and will be sent out on next reconnection.\r\nCurrently only one session is kept for particular browser per each \r\nclient computer.\r\nNothing horrible happens if you open multiple windows within the same browser,\r\nonly that nREPL output will randomly be sprinkled across multiple output windows. \r\nThis restriction will be removed soon, \r\nbut for the time being using Chrome + Firefox + Safari will give you 3 \r\nsimultaneous sessions :). \r\n\r\nYou can submit multiple forms (scripts) without waiting\r\nfor the previous ones to finish - they will be queued by \r\nnREPL server. The 'Interrupt' button will try (and in most cases succeed)\r\nto break the current script execution and possibly schedule the next one in\r\nthe queue, if any. Note that if script creates other threads they may\r\nnot be interrupted, and that their eventual output will not be captured by \r\nnREPL server - it will go to the stdout of the shell that started your \r\nClojure application. If you are on Heroku, you can catch \r\nit with 'heroku logs -t' command. \r\n\r\nThis demo blog (noirMon) is based on  Chris Granger's \r\n[Noir-blog](https://github.com/ibdknox/Noir-blog) \r\nexample application for his \r\n[Noir](https://github.com/ibdknox/noir) \r\n web framework. \r\n\r\nOnly small amount of changes was required to add ringMon capability to\r\nthis application:\r\n\r\n<script src=\"https://gist.github.com/2030301.js\"> </script>\r\n\r\n*  include   [noirmon \"0.1.0-SNAPSHOT\"] in project.clj<p>\r\n<p>*  add the middleware itself before starting the server:<br>\r\n               (server/add-middleware monitor/wrap-ring-monitor) \r\n<p>* put convenient link to access the monitoring page (optional)</p> ", :id "0"}}, :next-post-id 2, :users {"zoka" {:username "zoka", :password "$2a$10$jIUNBhDkTI6lX7uU9PhmLupLSJERDV3BAJIojGKLEOlu8VDDsXSvy"}}}